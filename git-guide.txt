############################################################
# using git locally                                        #
############################################################

## list the configuration
git config -l   

## set name and email
git config --global user.name "Neo Chen"
git config --global user.email neox@yahoo.cn

## colorful output
git config --global color.diff auto  // already given
git config --global color.status auto
git config --global color.branch auto

## project initial
git init
git add .
git commit -m "commit message"

## list changes
git status
git diff //for more detailed information

## commit changes
git commit -am "commit message"

##  start tracking new files and also to stage changes to already tracked files
git add 
## short message for git status
git status -s

## Unstaged changes after reset:
git reset HEAD -- filename 

## remove files from being tracked in Git. It will also remove them from working directory
git rm 
# un-track a file and ignore it
git rm --cached filename

## branch and mergin
# list all branches
git branch

# create branch
git branch testing

# switch to a branch
git checkout testing
# or create and switch to a branch
git checkout -b testing

# delete branch
git branch -d testing

# merge branch(under master)
git merge testing

# see log information about a branch
git log
# or
git log --oneline

# tag a branch
git tag -a v1.0
# or
git tag -a v0.9 558151a

############################################################
# sharing and updateing // using github.com                #
############################################################

# list remotes
git remote
git remote -v

# add a remote
git remote add origin(github//alias) git@github.com:neoxen/gitdemo.git

# delete a remote
git remote rm orgin

# download new branches and data from a remote
git fetch github

# push new branches and data to a remote
git push github master
git push github testing

## using github
#1. register an account on github.com
#2. create a repository
#3. config the repository
#3.1 
cd ~/.ssh
#3.2 
ls
#3.3 
mkdir key_backup
#3.4
cp id_rsa* key_backup
rm id_rsa*
#3.5
ssh-keygen -t rsa -C "neox@yahoo.cn"
# Generating public/private rsa key pair.
# Enter file in which to save the key (/c/Users/Tekkub/.ssh/id_rsa):
# Enter passphrase (empty for no passphrase):
# Enter same passphrase again:
# Your identification has been saved in /c/Users/Tekkub/.ssh/id_rsa.
# Your public key has been saved in /c/Users/Tekkub/.ssh/id_rsa.pub.
# The key fingerprint is:
# e8:ae:60:8f:38:c2:98:1d:6d:84:60:8c:9e:dd:47:81 tekkub@gmail.com

#3.6 copy the text in id_rsa.pub to SSH Public Keys on github.com
#3.7 test the configuration
ssh git@github.com

############################################################
# ignoring files                                           #
############################################################

#1. .gitignore
#2. global .gitignore
# A global .gitignore file can also be used by adding one to 
# your global git config. For example, you might create the 
# file ~/.gitignore_global and add some rules to it. To add 
# this to your config, run 
git config --global core.excludesfile ~/.gitignore_global
#3. repo exclude
# Local per-repo rules can be added to the 
.git/info/exclude 
# file in your repo. These rules are not committed with 
# the repo so they are not shared with others. This method 
# can be used for locally-generated files that you donâ€™t 
# expect other users to generate, like files created by 
# your editor.
